数据库结构优化

数据库结构优化的目的

    减少冗余

    尽量避免数据维护中出现更新,插入和删除异常

        插入异常: 如果表中的某个实体伴随另一个实体而存在
        更新异常: 如果更改表中的某个实体的单独属性时,需要对多行进行更新
        删除异常: 如果删除了表中的某一实体则会导致其他实体的消失

    节约数据存储空间

数据库结构设计的步骤

    需求分析

        全面了解产品设计的存储需求
        存储需求
        数据处理需求
        数据的安全性和完整性

    逻辑设计

        设计数据的逻辑存储结构
        数据实体之间的逻辑关系,解决数据冗余和数据维护异常

    物理设计

        根据所使用的数据库特点进行表结构设计

    维护优化

        根据实际情况对索引,存储结构等进行优化

数据库设计范式

    完全按照范式设计，确实表之间的关系明了，也没有冗余数据，但是却导致join多张表
    使得查询性能降低

反范式化设计

    运行存在少量的数据冗余，即使使用空间换时间

物理设计

    定义数据库，表及字段的命令规范

        可读性

        表意性

        长名性

    选择合适的存储引擎

    为表中的字段选择合适的数据类型

        当一列可以选择多种数据类型时，应该优先选择数字类型，
        其次是日期或二进制类型，最后是字符类型。
        对于相同级别的数据类型，应该优先选择占用空间小的数据类型

        如何选择正确整数类型

            tinyint     1字节

            smallint    2字节

            mediumint   3字节

            int         4字节

            bigint      8字节

        如何正确选择实数类型

            float     不精确

            double    不精确

            decimal   精确

        如何选择varchar, char 类型

            varchar类型的存储特点：
                varchar用于存储变长字符串，只占用必要的存储空间

            使用最小的符合需求的长度
            varchar(5) and varchar(200) 存储'mysql'字符串性能不同

            char, 定长
            字符串存储在char类型的列中会删除末尾的空格
            char类型的最大宽度为255
            适合存储长度近似的值
            适合存储短字符串
            适合存储经常更新的字符串列

        datatime类型

            与时区无关，占用8个字节的存储空间

        timestamp 类型

            存储时间戳
            时区有关
            在行的数据修改时可以自动修改timestamp列的值

            修改时区:

                set time_zone='+10:00';

                create table t(d1 datetime, d2 timestamp);

                insert into t values(now(), now());

                select * from t;

        date类型和time类型

            date类型保存日期
            time类型保存时间

        存储日期时间数据的注意事项:

            不要使用字符串类型来存储日期时间数据

            日期时间类型通常比字符串占用的存储空间小

            日期时间类型在进行查找过滤时可以利用日期来进行对比

            日期时间类型还有丰富的处理函数，可以方便的进行日期计算

    建立数据库结构








    