MySql 体系结构

插件式存储引擎

mysql体系结构

客户端：
    jdbc， php， java

mysql服务层: 
    连接管理器
    查询缓存
    查询解析
    查询优化器

select 语句：
    如何从文件中获得我们所要查询的数据，
    这个具体的实现方式则是由下一层存储引擎层来实现的

存储引擎层：
    存储引擎是针对表的而不是针对库的
    一个库中的不同表可以使用不同的存储引擎

mysql 常用存储引擎之 MyISAM 

    Mysql5.5之前版本默认存储引擎

    myisam: 系统表，临时表
        这里的临时表是指，在排序，分组等操作中，当数量超过一定的大小之后，由查询优化器建立的临时表

    MyISAM 不支持行级锁，换句话说，MyISAM 会对整张表加锁，而不是针对行。
    同时，MyISAM 不支持事务和外键。MyISAM 可被压缩，存储空间较小，而且 MyISAM 在筛选大量数据时非常快。

    myisam 存储引擎表有MYD(数据文件)和MYI(索引文件)组成。
    myIsam.frm 记录表结构
    myIsam.MYD
    myIsam.MYI

    并发性与锁级别:

        表锁

        并发性不好
    
    表损坏修复

        check table tablename
        repair table tablename

        create table myIsam(id int, c1 varchar(20))engine=myisam;

        ls -l myIsam*

        check table myIsam;
        repair table myIsam;

    支持的索引类型

        全文索引
        支持数据压缩(数据导入后就不再修改), 命令：myisampack
            myisampack -b -f myIsam.MYI
            压缩过后再插入数据会失败，会提示这个表是一个只读的表
            所以已压缩的表不能写操作只能读操作

    适用场景:

        非事务型应用
        只读类应用
        空间类应用

mysql 常用存储引擎之 Innodb

    InnoDB 是事务型引擎，当事务异常提交时，会被回滚。
    同时，InnoDB 支持行锁。
    此外，InnoDB 需要更多存储空间，会在内存中建立其专用的缓冲池用于高速缓冲数据和索引。
    InnoDB 支持自动奔溃恢复特性。

    mysql5.5及之后的版本默认存储引擎

    innodb 适用表空间进行数据存储

    innodb_file_per_table 参数:
        on, 独立表空间， tablename.ibd
        off, 系统表空间， ibdataX, X 一个递增的整型

    show variables like 'innodb_file_per_table'; // 命令查看是否开启

    create table myinnodb(id int, c1 varchar(10)) engine ='innodb';

    set global innodb_file_per_table=off;

    系统表空间和独立表空间要如何选择

        系统表空间无法简单的搜索文件大小
        独立表空间可以通过 optimize table 命令收缩系统文件

        系统表空间会产生 IO 瓶颈, 多个表顺序操作
        独立表空间可以同时向多个文件刷新数据

        建议：
            innodb 使用独立表空间
        
        表转移步骤：
            把原来存在于系统表空间的表转移到独立表空间中的方法:  我应该遇不到哦。。。

    innodb 存储引擎特性：

        innodb 支持行级锁
        行级锁可以最大程度支持并发
        行级锁是由存储引擎层实现的

        innodb 是一种事务性存储引擎
        完全支持事务的ACID特性
        Redo log, 存储已提交的事务
        Undo log, 存储未提交的事务，用于回滚等

        查看redo log 缓冲区大小, 不用太大，隔秒会把数据刷到磁盘上
        show variables like 'innodb_log_buffer_size';

        产生多少个redo log 文件
        show variables like 'innodb_log_files_in_group';

        什么是锁？
            锁的主要作用是管理共享资源的并发访问
            锁用于实现事务的隔离性

            共享锁，读锁
            独占锁，写锁

            锁的粒度：

                表级锁
                    lock table myinnodb write;
                    unlock tables;

                行级锁
                    。。。

            阻塞和死锁：

                什么是阻塞
                什么是死锁，少量死锁，系统会自动发现并处理
            
            innodb 状态检查：

                show engine innodb status

    使用场景：

        innodb 适合于大多数OLTP应用
        全文索引
        空间函数

mysql 常用存储引擎之 CSV

    数据以文本方式存储在文件中
    .csv文件存储表内容
    .csm文件存储表的元数据，如表状态和数据量
    .frm文件存储表结构信息

    特点:
        以CSV格式进行数据存储
        所有列必须都是不能为NULL的
        不支持索引, 不适合大表, 不适合在线处理
        可以对数据文件直接编辑

    测试:
        create table mycsv(id int not null, c1 varchar(10) not null, c2 char(20) not null) engine=csv;

        show create table mycsv;

        insert into mycsv values(1, 'aaa', 'bbb'),(2, 'ccc', 'ddd');

        select * from mycsv;

        可以直接编辑csv文件.
        
        flush tables;

    适用场景:

        适合作为数据交换的中间表.
            数据->CSV文件->其他web程序


mysql 常用存储引擎之 Archive

    只支持 insert & select
    只支持 id 上创建索引

    存储空间占用小

    适用场景:
        日志和数据采集类应用


mysql 常用存储引擎之 Memory

    也称 HEAP 存储引擎, 所有数据保存在内存中

    只有表结构存在在磁盘, mymemory.frm 文件

    支持hash索引和BTree索引, 默认hash索引
        hash索引,等值查询非常快, 范围查询不能利用到hash索引, 需要使用BTree索引

    所有字段都为固定长度 varchar(10) => char(10)

    不支持 BLOG 和 TEXT 等大字段

    Memory存储引擎使用表级锁

    最大大小由 max_heap_table_size 参数决定, 默认16M, 修改过后对已存在的表是无效的,需要重建.

    create table mymemory(id int, c1 varchar(10), c2 char(10)) engine=memory;

    create index idx_c1 on mymemory(c1);

    create index idx_c2 using btree on mymemory(c2);

    show index from mymemory\G

    show create table mymemory\G

    show table status like 'mymemory'\G

    memory表示不是临时表!

    临时表

        系统使用临时表

            超过限制使用 Myisam 临时表
            未超限制使用 Memory 表

        create temporary table 建立的临时表, 可以使用任何存储引擎

    使用场景:

        用于查找或者映射表, 例如邮编和地区的映射表

        用于保存数据分析中产生的中间表

        用于缓存周期性聚合数据的结果表

        ** Memory数据易丢失, 所以要求数据可再生


mysql 常用存储引擎之 Federated

    提供了访问远程MySql服务器上表的方法

    本地不存储数据, 数据全部放到远程服务器上

    本地需要保存表结构和远程服务器的连接信息

    用不到吧..不写笔记了~

    适用场景:

        偶尔的统计分析和手工查询


如何选择正确的存储引擎

    事务

    备份

    崩溃恢复

    存储引擎的特有特性

    * 不要混合适用存储引擎


InnoDB 与 MyISAM 的主要区别

    方面            MyISAM  InnoDB

    事务            不支持  支持
    外键            不支持  支持
    行级锁          不支持  支持
    自动奔溃恢复    不支持  支持

对于如何选择 InnoDB 与 MyISAM 存储引擎，我的建议：

    一般情况下，应该优先选择 InnoDB 存储引擎，并且尽量不要将 InnoDB 与 MyISAM 混合使用。    

