upstream huahua_server { 
    server unix:/home/webapps/hua_env/run/gunicorn.sock fail_timeout=0;
    #server 127.0.0.1:8000;
}

server {
    listen 80;
    server_name quieter.me;
    
    #rewrite ^(.*)$ https://$host$1 permanent;
    #rewrite     ^   https://$server_name$request_uri? permanent;
    return 301 https://$server_name$request_uri;
}
 
server {
 
    ssl on;
    listen 443 ssl spdy fastopen=3 reuseport;
    spdy_headers_comp 6;
    server_name quieter.me;
 
    client_max_body_size 128M;
 
    access_log /home/webapps/hua_env/logs/nginx-access.log;
    error_log /home/webapps/hua_env/logs/nginx-error.log;
 
    #  安全  隐藏返回头部的 nginx 版本及操作系统信息. 如果想彻底隐藏服务器的信息,修改源码中的 Server Name 再编译.
    #  如果网站支持SPDY, 跟SPDY相关的地方也要修改
    server_tokens off;

    # 证书其实是个公钥，它会被发送到连接服务器的每个客户端
    ssl_certificate     /etc/ssl/quieter/hua/ssl-unified.crt;
    # 私钥是用来解密的，所以它的权限要得到保护但nginx的主进程能够读取。
    ssl_certificate_key /etc/ssl/quieter/hua/ssl.key;

    # https 优化
    # 设置ssl/tls会话缓存的类型和大小。如果设置了这个参数一般是shared，buildin可能会参数内存碎片，默认是none，和off差不多，停用缓存。如shared:SSL:10m表示我所有的nginx工作进程共享ssl会话缓存，官网介绍说1M可以存放约4000个sessions
    ssl_session_cache shared:SSL:10m;
    #  客户端可以重用会话缓存中ssl参数的过期时间，内网系统默认5分钟太短了，可以设成30m即30分钟甚至4h
    ssl_session_timeout 10m;

    ssl_dhparam /etc/ssl/quieter/hua/dhparam.pem;
    # TLS 会话恢复和 OCSP stapling
    ssl_session_tickets      off;
    ssl_stapling             on;
    ssl_stapling_verify      on;
    resolver                 8.8.4.4 8.8.8.8  valid=300s;
    resolver_timeout         10s;
    ssl_trusted_certificate  /etc/ssl/quieter/hua/ssl-unified.crt;


    # https 安全
    # 指令用于启动特定的加密协议，nginx在1.1.13和1.0.12版本后默认是ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2
    ssl_protocols TLSv1 TLSv1.1 TLSv1.2; # SSLv3 已证实不安全
    # 设置协商加密算法时，优先使用我们服务端的加密套件，而不是客户端浏览器的加密套件。
    ssl_prefer_server_ciphers on;
    # 选择加密套件，不同的浏览器所支持的套件（和顺序）可能会不同。
    # ssl_ciphers EECDH+CHACHA20:EECDH+AES128:RSA+AES128:EECDH+AES256:RSA+AES256:EECDH+3DES:RSA+3DES:!MD5;
    ssl_ciphers "ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA:ECDHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES256-GCM-SHA384:AES128-GCM-SHA256:AES256-SHA256:AES128-SHA256:AES256-SHA:AES128-SHA:DES-CBC3-SHA:HIGH:!aNULL:!eNULL:!EXPORT:!DES:!MD5:!PSK:!RC4";

    # 如果你运行一个HTTPS-only网站，您应该考虑使用 HTTP Strict Transport Security (HSTS). HSTS 告诉浏览器，网站只能通过安全连接访问。
    # Remember this setting for 365 days
    add_header Strict-Transport-Security "max-age=31536000; includeSubdomains; preload";

    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    
    location / {
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto https;
        proxy_set_header Host $http_host;
        proxy_redirect off;
 
        # proxy_buffering off;
 
        if (!-f $request_filename) {
            proxy_pass http://huahua_server;
            break;
        }
    }

    location /static/ {
        alias   /home/webapps/hua_env/huahua/static/;
        expires 3d;
    }

    # 禁用非必要的方法
    # 针对 GET、POST 以及 HEAD 之外的请求，直接返回了 444 状态码（444 是 Nginx 定义的响应状态码，会立即断开连接，没有响应正文）
    if ($request_method !~ ^(GET|HEAD|POST)$ ) {
        return    444;
    }

    # 只允许我们的域名访问
    if ($host !~ ^(quieter.me|www.quieter.me)$ ) {
        return    444;
    }
 
}

其他配置及参数详解:

*** 合理配置响应头 ***
add_header  Strict-Transport-Security  "max-age=31536000";
add_header  X-Frame-Options  deny;
add_header  X-Content-Type-Options  nosniff;
add_header  Content-Security-Policy  "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://a.disquscdn.com; img-src 'self' data: https://www.google-analytics.com; style-src 'self' 'unsafe-inline'; frame-src https://disqus.com";
Strict-Transport-Security（简称为 HSTS）可以告诉浏览器，在指定的 max-age 内，始终通过 HTTPS 访问我的博客。即使用户自己输入 HTTP 的地址，或者点击了 HTTP 链接，浏览器也会在本地替换为 HTTPS 再发送请求。另外由于我的证书不支持多域名，我没有加上 includeSubDomains。

X-Frame-Options 用来指定此网页是否允许被 iframe 嵌套，deny 就是不允许任何嵌套发生。

X-Content-Type-Options 用来指定浏览器对未指定或错误指定 Content-Type 资源真正类型的猜测行为，nosniff 表示不允许任何猜测。

Content-Security-Policy（简称为 CSP）用来指定页面可以加载哪些资源，主要目的是减少 XSS 的发生。我允许了来自本站、disquscdn 的外链 JS，还允许内联 JS，以及在 JS 中使用 eval；允许来自本站和 google 统计的图片，以及内联图片（Data URI 形式）；允许本站外链 CSS 以及内联 CSS；允许 iframe 加载来自 disqus 的页面。对于其他未指定的资源，都会走默认规则 self，也就是只允许加载本站的。


*** 服务器性能及安全在线检测 ***
ssl 检查: https://www.ssllabs.com/ssltest/index.html
测试网站速度: http://ce.cloud.360.cn/
SPDY check: https://spdycheck.org/#quieter.me


*** https 优化 ***

建立 HTTPS 连接本身就慢（多了获取证书、校验证书、TLS 握手等等步骤），如果没有优化好只能是慢上加慢。

TLS 会话恢复的目的是为了简化 TLS 握手，有两种方案：Session Cache 和 Session Ticket。他们都是将之前握手的 Session 存起来供后续连接使用，所不同是 Cache 存在服务端，占用服务端资源；Ticket 存在客户端，不占用服务端资源。另外目前主流浏览器都支持 Session Cache，而 Session Ticket 的支持度一般。

ssl_stapling 开始的几行用来配置 OCSP stapling 策略。浏览器可能会在建立 TLS 连接时在线验证证书有效性，从而阻塞 TLS 握手，拖慢整体速度。OCSP stapling 是一种优化措施，服务端通过它可以在证书链中封装证书颁发机构的 OCSP（Online Certificate Status Protocol）响应，从而让浏览器跳过在线查询。服务端获取 OCSP 一方面更快（因为服务端一般有更好的网络环境），另一方面可以更好地缓存。


>>> pem 文件是这样生成的：
openssl dhparam -out dhparam.pem 4096


>>> 控制并发连接:
### Directive describes the zone, in which the session states are stored i.e. store in slimits. ###
### 1m can handle 32000 sessions with 32 bytes/session, set to 5m x 32000 session ###
       limit_zone slimits $binary_remote_addr 5m;
 
### Control maximum number of simultaneous connections for one session i.e. ###
### restricts the amount of connections from a single ip address ###
        limit_conn slimits 5;

上面表示限制每个远程IP地址的客户端同时打开连接不能超过5个。

>>> 更改nginx版本名称:
编辑文件/http/ngx_http_header_filter_module.c：
vi +48 src/http/ngx_http_header_filter_module.c
找到行：
static char ngx_http_server_string[] = "Server: nginx" CRLF;
static char ngx_http_server_full_string[] = "Server: " NGINX_VER CRLF;
按照以下行修改：
static char ngx_http_server_string[] = "Server: Ninja Web Server" CRLF;
static char ngx_http_server_full_string[] = "Server: Ninja Web Server" CRLF;

>>> 只允许我们的域名的访问
## 如果机器人只是随机扫描服务器的所有域名，那拒绝这个请求。你必须允许配置的虚拟域或反向代理请求。你不必使用IP地址来拒绝。
## Only requests to our Host are allowed i.e. nixcraft.in, images.nixcraft.in and www.nixcraft.in
    if ($host !~ ^(nixcraft.in|www.nixcraft.in|images.nixcraft.in)$ ) {
        return 444;
    }
##

>>> 如何拒绝一些User-Agents？
## 你可以很容易地阻止User-Agents,如扫描器，机器人以及滥用你服务器的垃圾邮件发送者:
## Block download agents ##
     if ($http_user_agent ~* LWP::Simple|BBBike|wget) {
        return 403;
     }
##

阻止Soso和有道的机器人：
## Block some robots ##
    if ($http_user_agent ~* Sosospider|YodaoBot) {
        return 403;
    }

>>> 如何防止图片盗链
## 图片或HTML盗链的意思是有人直接用你网站的图片地址来显示在他的网站上。最终的结果，你需要支付额外的宽带费用。这通常是在论坛和博客。我强烈建议您封锁，并阻止盗链行为。

# Stop deep linking or hot linking
location /images/ {
    valid_referers none blocked www.example.com example.com;
    if ($invalid_referer) {
        return   403;
    }
}

例如：重定向并显示指定图片
valid_referers blocked www.example.com example.com;
    if ($invalid_referer) {
        rewrite ^/images/uploads.*\.(gif|jpg|jpeg|png)$ http://www.examples.com/banned.jpg last
    }

>>> 目录限制
你可以对指定的目录设置访问权限。所有的网站目录应该一一的配置，只允许必须的目录访问权限。
通过IP地址限制访问
你可以通过IP地址来限制访问目录/docs/:
location /docs/ {
  ## block one workstation
  deny    192.168.1.1;
 
  ## allow anyone in 192.168.1.0/24
  allow   192.168.1.0/24;
 
  ## drop rest of the world
  deny    all;
}

通过密码保护目录
首先创建密码文件并增加“user”用户：
mkdir /usr/local/nginx/conf/.htpasswd/
htpasswd -c /usr/local/nginx/conf/.htpasswd/passwd user

编辑nginx.conf,加入需要保护的目录：
### Password Protect /personal-images/ and /delta/ directories ###
location ~ /(personal-images/.*|delta/.*) {
  auth_basic  "Restricted";
  auth_basic_user_file   /usr/local/nginx/conf/.htpasswd/passwd;
}
一旦密码文件已经生成，你也可以用以下的命令来增加允许访问的用户：
htpasswd -s /usr/local/nginx/conf/.htpasswd/passwd userName


>>> 在防火墙级限制每个IP的连接数:
##网络服务器必须监视连接和每秒连接限制。PF和Iptales都能够在进入你的nginx服务器之前阻止最终用户的访问。
Linux Iptables:限制每次Nginx连接数
##下面的例子会阻止来自一个IP的60秒钟内超过15个连接端口80的连接数。
/sbin/iptables -A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --set
/sbin/iptables -A INPUT -p tcp --dport 80 -i eth0 -m state --state NEW -m recent --update --seconds 60  --hitcount 15 -j DROP
service iptables save

>>> 如果可能让Nginx运行在一个chroot监狱:
把nginx放在一个chroot监狱以减小潜在的非法进入其它目录。你可以使用传统的与nginx一起安装的chroot。如果可能，那使用FreeBSD jails，Xen，OpenVZ虚拟化的容器概念。

>>> 限制Nginx连接传出:
黑客会使用工具如wget下载你服务器本地的文件。使用Iptables从nginx用户来阻止传出连接。ipt_owner模块试图匹配本地产生的数据包的创建者。下面的例子中只允许user用户在外面使用80连接。

/sbin/iptables -A OUTPUT -o eth0 -m owner --uid-owner vivek -p tcp --dport 80 -m state --state NEW,ESTABLISHED  -j ACCEPT